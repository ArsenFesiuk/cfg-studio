{
    "appBarTitle": "Normalising context-free grammar",
    "repository": "Repository",
    "documentation": "Documentation",
    "contacts": "Contacts",

    "input": "Input",
    "output": "Output",
    "explanation": "Explanation",
    "removeEpsilon": "Remove Epsilon",
    "removeUnitRules": "Remove Unit Rules",
    "removeUselessSymbols": "Remove Useless Symbols",
    "removeLeftRecursion": "Remove Left Recursion",
    "convertToCNF": "CFG to CNF",

    "guideTitle": "The application guide",
    "guideInput": "How to enter grammar correctly",
    "guideExplanation": "How to get an explanation",
    "guideExplanation1": "To get an explanation, you need to set the correct input data and click on the button of a certain algorithm, at this point a pseudo-code will appear, where you can move step by step and have an explanation for each step.",
    "guideIntroduction": "Introduction",
    "guideIntroduction2": "In this app, you can easily convert context-free grammar to Chomsky Normal Form (CNF) using the CFG to CNF button, and also perform each algorithm separately. This allows you to see each step of the transformation in detail and understand how the grammar is converted to normal form.",
    "guideExample1": "All tokens must be separated by space characters",
    "guideExample2": "If you need an arrow, write ->",
    "guideExample3": "If you need an epsilon, write \\eps",

    "examples": "Examples",
    "testForEpsilon" : "Test for epsilon rules",
    "testForUnit" : "Test for unit rules",
    "testForUseless" : "Test for useless symbols",
    "testForLeftRecursion" : "Test for left recursion",
    "testForCNF" : "Test for CFG to CNF",

    "Row1ForLeftRecursion" : "1.Start processing the rule for i = {{i}} ({{rule}})",
    "Row2ForLeftRecursion" : "2.Processing of previous rules for j = {{j}} ({{rule}})",
    "Row3ForLeftRecursion" : "3.Replacing the rule for Aᵢ → Aⱼα with new alternatives: {{currentRule}} is replaced by {{previousRule}}\ni = {{i}}\nj = {{j}}",
    "Row4ForLeftRecursion" : "4.{{leftSide}} → {{newRightSide}}\ni = {{i}}\nj = {{j}}",
    "Row5ForLeftRecursion" : "5.And so all the rules need to be changed",
    "Row6ForLeftRecursion" : "6.Current state of rules after processing j = {{j}} ({{rule}})\n{{rules}}",
    "Row7ForLeftRecursion" : "7.Rule after removing the left-hand right recursion:\n{{rules}}\nNew rule created:\n{{newRule}}\ni = {{i}}",
    "Row8ForLeftRecursion" : "8.Current state of rules after processing i = {{i}} ({{rule}})\n{{rules}}",

    "Row1ForRemoveEpsilon": "1. Create Nε: {{nullableSet}}",
    "Row2ForRemoveEpsilon": "2. Copy Nε to N̂ε\nNε = {{nullableSet}}\nN̂ε = {{previousNullableSet}}",
    "Row3ForRemoveEpsilon": "3. {{leftSide}} is added to Nε because it has ε.",
    "Row3ForRemoveEpsilon2": "3. {{leftSide}} is added to Nε because all nonterminals in the alternative {{alternative}} are N̂ε.",
    "Row4ForRemoveEpsilon": "4. Nε = {{nullableSet}}\nN̂ε = {{previousNullableSet}}",

    "PseudocodeRemoveLeftRecursion": "Algorithm to remove left recursion",

    "next": "Next",

    "stepsForLeftRecursion": [
        "1:   \\( \\text{ for all } i \\in \\{1,2,\\dots,n\\} \\text{ do }\\)",
        "2:       \\( \\text{ for all } j \\in \\{1,\\dots,i-1\\} \\text{ do } \\)",
        "3:           \\( \\text{ replace each rule of the form } A_i \\to A_j\\alpha  \\text{ with the rules } \\)",
        "4:           \\( A_i \\to \\beta_1\\alpha \\mid \\beta_2\\alpha \\mid \\dots \\mid \\beta_m\\alpha \\),",
        "5:           \\( \\text{ where if }  A_j \\to \\beta_1 \\mid \\beta_2 \\mid \\dots \\mid \\beta_m, \\text{ then all } A_j \\text{ rules are included } \\)",
        "6:        \\( \\text{ end for } \\)",
        "7:        \\( \\text{ remove any direct left recursion in non-terminal } A_i \\text{ using (2) } \\)",
        "8:   \\( \\text{ end for } \\)"
    ],

    "stepsForRemoveUnitRules": [
        "1:         \\( \\text{for all } A_i \\in N \\text{, perform the following:} \\)",
        "2:             \\( N_A \\gets \\emptyset \\)",
        "3:             \\( N'_A \\gets N_A \\)",
        "4:                 \\( N_A \\gets N'_A \\cup \\{ C \\mid B \\to C \\in P \\text{ and } B \\in N'_A \\} \\)",
        "5:             \\( N'_A \\neq N_A \\text{, jump to step 3} \\)",
        "6:             \\( \\text{replace the rules } A_i \\to A_j \\text{ with all alternatives from } N_A \\)",
        "7:         \\( \\text{end for} \\)",
        "8:   \\( \\text{end} \\)"
    ],

    "stepsForRemoveEpsilonRules": [
        "1:     \\( N_\\epsilon \\gets \\emptyset; \\) ⊲ \\( \\text{Initialization of the set of nullable nonterminals} \\)",
        "2:         \\( N̂_\\epsilon \\gets N_\\epsilon; \\) ⊲ \\( \\text{Copy } N_\\epsilon \\text{ into } N̂_\\epsilon \\)",
        "3:         \\( N_\\epsilon \\gets N̂_\\epsilon \\cup \\{ A \\mid A \\to \\alpha \\in P, \\alpha \\in N̂_\\epsilon^* \\}; \\)",
        "4:     \\( \\text{While } N_\\epsilon \\neq N̂_\\epsilon, \\text{ go to step 2.} \\)"
    ],



    "stepsForRemoveUselessSymbols": [
        "1:   \\( N_T \\gets \\emptyset \\) ⊲ \\( \\text{Initialization of the set of useful non-terminals} \\)",
        "2:       \\( N'_T \\gets N_T \\)",
        "3:       \\( N_T \\gets N'_T \\cup \\{ A \\mid A \\to \\alpha \\in P, \\alpha \\in (N'_T \\cup T)^* \\} \\)",
        "4:   \\( \\text{While } N_T \\neq N'_T, \\text{ proceed to step 2} \\) ⊲ \\( \\text{Repeat while the set } N_T \\text{ changes} \\)",
        "5:   \\( \\text{If } S \\in N_T, \\text{ continue} \\) ⊲ \\( \\text{If } S \\notin N_T, \\text{ then } L(G) = \\emptyset \\)",
        "6:       \\( \\text{Remove from the grammar } G \\text{ all non-terminals that do not belong to } N_T \\)",
        "7:       \\( V_D \\gets \\{ S \\} \\) ⊲ \\( \\text{Initialization of the set of reachable symbols} \\)",
        "8:           \\( V'_D \\gets V_D \\)",
        "9:           \\( V_D \\gets V'_D \\cup \\{ X \\mid A \\to \\alpha X \\beta \\in P, A \\in V'_D \\} \\)",
        "10:      \\( \\text{While } V_D \\neq V'_D, \\text{ proceed to step 8} \\) ⊲ \\( \\text{Repeat while the set } V_D \\text{ changes} \\)",
        "11:      \\( \\text{Remove from the grammar } G \\text{ all symbols that do not belong to } V_D \\)",
        "12:  \\( \\text{End} \\)"
    ]

}
